(()=>{let e;var t={},l=(t={convertWei:function(e,t,l){let o,s,c,i,n=e.toString();return("-"===n.charAt(0)?(n=n.substring(1),i=!0):i=!1,n.length>t)?(","===(o=(o=(o=n.substring(0,n.length-t)).split("").reverse().join("")).replace(/(\d{3})/g,"$1,")).slice(-1)&&(o=o.slice(0,-1)),o=o.split("").reverse().join(""),","===(s=(s=(s=n.substring(n.length-t,n.length)).substring(0,l)).replace(/(\d{3})/g,"$1,")).slice(-1)&&(s=s.slice(0,-1)),c=o+"."+s):(","===(s=(s=(s=(s=n.substring(n.length-t,n.length)).substring(0,l)).padStart(l,"0")).replace(/(\d{3})/g,"$1,")).slice(-1)&&(s=s.slice(0,-1)),c="0."+s),!0==i&&(c="-"+c),"."===c.slice(-1)&&(c=c.slice(0,-1)),c},convertHex:function(e){if(!e.match(/^(0x)?[0-9A-Fa-f]+$/))throw Error("Invalid hexadecimal input");e.startsWith("0x")&&(e=e.slice(2));let t=0;e=e.toUpperCase();for(let l=0;l<e.length;l++){let o="0123456789ABCDEF".indexOf(e[l]);t=16*t+o}return t}}).convertWei,o=t.convertHex;chrome.contextMenus.create({id:"Wei to Eth",title:"Wei to Eth",contexts:["selection"]}),chrome.contextMenus.create({id:"Hex Converter",title:"Hex Converter",contexts:["selection"]});let s={decimalsValue:1,displayDecimalsValue:1};chrome.storage.local.get(["decimals"]).then(e=>{s.decimalsValue=+e.decimals}),chrome.storage.local.get(["displayDecimals"]).then(e=>{s.displayDecimalsValue=+e.displayDecimals}),chrome.contextMenus.onClicked.addListener(function(t,o){if("Wei to Eth"===t.menuItemId){e=t.selectionText,console.log(s.decimalsValue),console.log(s.displayDecimalsValue);let o=l(t.selectionText,s.decimalsValue,s.displayDecimalsValue);console.log(e),console.log(o),chrome.storage.local.set({Str:o}),chrome.storage.local.set({conversionType:"wei"}),chrome.storage.local.set({preConverted:e})}}),chrome.contextMenus.onClicked.addListener(function(t,c){if("Hex Converter"===t.menuItemId){e=t.selectionText;let c=l(o(t.selectionText),s.decimalsValue,s.displayDecimalsValue);console.log(e),chrome.storage.local.set({Str:c}),chrome.storage.local.set({conversionType:"hex"}),chrome.storage.local.set({preConverted:e})}})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
