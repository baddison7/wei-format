var e={},t=function(e,t,l,n){if("hex"===n){let t;return e.length%2&&(t="0"+e),t=BigInt("0x"+t)}{let n,s,c,i,d,a=BigInt(e);return console.log(a),console.log(("-"===(d=e.toString()).charAt(0)?(d=d.substring(1),i=!0):i=!1,d.length>t?(","===(n=(n=(n=d.substring(0,d.length-t)).split("").reverse().join("")).replace(/(\d{3})/g,"$1,")).slice(-1)&&(n=n.slice(0,-1)),n=n.split("").reverse().join(""),","===(s=(s=(s=d.substring(d.length-t,d.length)).substring(0,l)).replace(/(\d{3})/g,"$1,")).slice(-1)&&(s=s.slice(0,-1)),c=n+"."+s):(","===(s=(s=(s=(s=d.substring(d.length-t,d.length)).substring(0,l)).padStart(l,"0")).replace(/(\d{3})/g,"$1,")).slice(-1)&&(s=s.slice(0,-1)),c="0."+s),!0==i&&(c="-"+c),"."===c.slice(-1)&&(c=c.slice(0,-1)),a=c)),a}};document.addEventListener("DOMContentLoaded",function(){let e,l;chrome.storage.local.get(["selectedStr","selectedConversionType","decimalsValue","displayDecimalsValue"]).then(n=>{e=n.selectedStr,l=n.selectedConversionType;let s=n.decimalsValue,c=n.displayDecimalsValue;document.getElementById("displayDecimals").value=c,document.getElementById("decimals").value=s;let i=t(e,s,c,l);document.getElementById("convertedStr").textContent=i});let n=document.getElementById("decimalsForm");n.addEventListener("submit",function(n){n.preventDefault();let s=document.getElementById("decimals").value,c=document.getElementById("displayDecimals").value;chrome.storage.local.set({decimalsValue:s,displayDecimalsValue:c});let i=t(e,s,c,l);document.getElementById("convertedStr").textContent=i})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
