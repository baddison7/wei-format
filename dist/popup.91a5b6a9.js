var e={},t=(e={convertWei:function(e,t,l){let n,o,s,c,r=e.toString();return("-"===r.charAt(0)?(r=r.substring(1),c=!0):c=!1,r.length>t)?(","===(n=(n=(n=r.substring(0,r.length-t)).split("").reverse().join("")).replace(/(\d{3})/g,"$1,")).slice(-1)&&(n=n.slice(0,-1)),n=n.split("").reverse().join(""),","===(o=(o=(o=r.substring(r.length-t,r.length)).substring(0,l)).replace(/(\d{3})/g,"$1,")).slice(-1)&&(o=o.slice(0,-1)),s=n+"."+o):(","===(o=(o=(o=(o=r.substring(r.length-t,r.length)).substring(0,l)).padStart(l,"0")).replace(/(\d{3})/g,"$1,")).slice(-1)&&(o=o.slice(0,-1)),s="0."+o),!0==c&&(s="-"+s),"."===s.slice(-1)&&(s=s.slice(0,-1)),s},convertHex:function(e){if(!e.match(/^(0x)?[0-9A-Fa-f]+$/))throw Error("Invalid hexadecimal input");e.startsWith("0x")&&(e=e.slice(2));let t=0;e=e.toUpperCase();for(let l=0;l<e.length;l++){let n="0123456789ABCDEF".indexOf(e[l]);t=16*t+n}return t}}).convertWei;e.convertHex,document.addEventListener("DOMContentLoaded",function(){let e,l;chrome.storage.local.get(["Str"]).then(e=>{let t=e.Str;document.getElementById("Eth").textContent=t}),chrome.storage.local.get(["decimals"]).then(t=>{e=t.decimals,document.getElementById("decimals").value=e}),chrome.storage.local.get(["displayDecimals"]).then(e=>{l=e.displayDecimals,document.getElementById("displayDecimals").value=l});let n=document.getElementById("decimalsForm");n.addEventListener("submit",function(e){let l;e.preventDefault(),console.log("set");let n=document.getElementById("decimals").value;chrome.storage.local.set({decimals:n});let o=document.getElementById("displayDecimals").value;chrome.storage.local.set({displayDecimals:o}),chrome.storage.local.get(["preConverted"]).then(e=>{console.log(`1 ${l=e.preConverted}`),chrome.storage.local.get(["conversionType"]).then(e=>{console.log(`1 ${e.conversionType}`);{let e=t(l,n,o);console.log(e),document.getElementById("Eth").textContent=e}})})})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
