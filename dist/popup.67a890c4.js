var e={},t=(e={convertWei:function(e,t,n){let l,i,c,o,r=BigInt(e).toString();return("-"===r.charAt(0)?(r=r.substring(1),o=!0):o=!1,r.length>t)?(","===(l=(l=(l=r.substring(0,r.length-t)).split("").reverse().join("")).replace(/(\d{3})/g,"$1,")).slice(-1)&&(l=l.slice(0,-1)),l=l.split("").reverse().join(""),","===(i=(i=(i=r.substring(r.length-t,r.length)).substring(0,n)).replace(/(\d{3})/g,"$1,")).slice(-1)&&(i=i.slice(0,-1)),c=l+"."+i):(","===(i=(i=(i=(i=r.substring(r.length-t,r.length)).substring(0,n)).padStart(n,"0")).replace(/(\d{3})/g,"$1,")).slice(-1)&&(i=i.slice(0,-1)),c="0."+i),!0==o&&(c="-"+c),"."===c.slice(-1)&&(c=c.slice(0,-1)),c},convertHex:function(e){let t=e;return e.length%2&&(t="0"+e),t=BigInt("0x"+t)},convertUnix:function(e){let t=new Date(1e3*e),n=t.toUTCString();return{currentTimeZone:t=t.toLocaleDateString("en-GB",{weekday:"short",year:"numeric",month:"short",day:"numeric",hour:"2-digit",minute:"2-digit",second:"2-digit",timeZoneName:"short"}),UTC:n}}}).convertWei,n=e.convertHex,l=e.convertUnix;document.addEventListener("DOMContentLoaded",function(){let e,i;chrome.storage.local.get(["selectedStr","conversionType"]).then(c=>{if(e=c.selectedStr,"wei"===(i=c.conversionType)||"hex"===i)chrome.storage.local.get(["decimals","displayDecimals"]).then(l=>{document.getElementById("displayDecimals").value=l.displayDecimals,document.getElementById("decimals").value=l.decimals;let c=e;"hex"===i&&(c=n(c)),c=t(c,l.decimals,l.displayDecimals),document.getElementById("convertedStr").textContent=c});else if("unixTime"===i){document.getElementById("decimalsForm").style.display="none";let{currentTimeZone:t,UTC:n}=l(e);console.log(t),console.log(n),document.getElementById("convertedStr").textContent=t,document.getElementById("convertedStr2").textContent=n}}),document.getElementById("decimalsForm").addEventListener("submit",function(l){l.preventDefault();let c=document.getElementById("decimals").value,o=document.getElementById("displayDecimals").value;chrome.storage.local.set({decimals:c,displayDecimals:o});let r=e;"hex"===i&&(r=n(r)),r=t(r,c,o),document.getElementById("convertedStr").textContent=r})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
