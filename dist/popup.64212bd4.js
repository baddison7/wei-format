var e=function(e,t,l,n){{let n,s,i,c,a;let d=(("-"===(a=e.toString()).charAt(0)?(a=a.substring(1),c=!0):c=!1,a.length>t)?(","===(n=(n=(n=a.substring(0,a.length-t)).split("").reverse().join("")).replace(/(\d{3})/g,"$1,")).slice(-1)&&(n=n.slice(0,-1)),n=n.split("").reverse().join(""),","===(s=(s=(s=a.substring(a.length-t,a.length)).substring(0,l)).replace(/(\d{3})/g,"$1,")).slice(-1)&&(s=s.slice(0,-1)),i=n+"."+s):(","===(s=(s=(s=(s=a.substring(a.length-t,a.length)).substring(0,l)).padStart(l,"0")).replace(/(\d{3})/g,"$1,")).slice(-1)&&(s=s.slice(0,-1)),i="0."+s),!0==c&&(i="-"+i),"."===i.slice(-1)&&(i=i.slice(0,-1)),i);return d}};document.addEventListener("DOMContentLoaded",function(){let t,l;chrome.storage.local.get(["selectedStr","selectedConversionType","decimalsValue","displayDecimalsValue"]).then(n=>{t=n.selectedStr,l=n.selectedConversionType;let s=n.decimalsValue,i=n.displayDecimalsValue;document.getElementById("displayDecimals").value=i,document.getElementById("decimals").value=s;let c=e(t,s,i,l);document.getElementById("Eth").textContent=c});let n=document.getElementById("decimalsForm");n.addEventListener("submit",function(n){n.preventDefault();let s=document.getElementById("decimals").value,i=document.getElementById("displayDecimals").value;chrome.storage.local.set({decimalsValue:s,displayDecimalsValue:i});let c=e(t,s,i,l);document.getElementById("Eth").textContent=c})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
