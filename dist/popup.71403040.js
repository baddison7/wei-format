var e={},t=function(e,t,l,n){if("hex"===n){let t;return e.length%2&&(t="0"+e),t=BigInt("0x"+t)}{let n,s,i,c,d,a=BigInt(e);return"-"===(d=e.toString()).charAt(0)?(d=d.substring(1),c=!0):c=!1,d.length>t?(","===(n=(n=(n=d.substring(0,d.length-t)).split("").reverse().join("")).replace(/(\d{3})/g,"$1,")).slice(-1)&&(n=n.slice(0,-1)),n=n.split("").reverse().join(""),","===(s=(s=(s=d.substring(d.length-t,d.length)).substring(0,l)).replace(/(\d{3})/g,"$1,")).slice(-1)&&(s=s.slice(0,-1)),i=n+"."+s):(","===(s=(s=(s=(s=d.substring(d.length-t,d.length)).substring(0,l)).padStart(l,"0")).replace(/(\d{3})/g,"$1,")).slice(-1)&&(s=s.slice(0,-1)),i="0."+s),!0==c&&(i="-"+i),"."===i.slice(-1)&&(i=i.slice(0,-1)),i}};document.addEventListener("DOMContentLoaded",function(){let e,l;chrome.storage.local.get(["selectedStr","selectedConversionType","decimalsValue","displayDecimalsValue"]).then(n=>{e=n.selectedStr,l=n.selectedConversionType;let s=n.decimalsValue,i=n.displayDecimalsValue;document.getElementById("displayDecimals").value=i,document.getElementById("decimals").value=s;let c=t(e,s,i,l);document.getElementById("convertedStr").textContent=c});let n=document.getElementById("decimalsForm");n.addEventListener("submit",function(n){n.preventDefault();let s=document.getElementById("decimals").value,i=document.getElementById("displayDecimals").value;chrome.storage.local.set({decimalsValue:s,displayDecimalsValue:i});let c=t(e,s,i,l);document.getElementById("convertedStr").textContent=c})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
