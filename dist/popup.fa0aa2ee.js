document.addEventListener("DOMContentLoaded",function(){chrome.storage.local.get(["Str"]).then(e=>{console.log(storedStr=e.Str),document.getElementById("Eth").textContent=storedStr});let e=document.getElementById("decimalsForm");e.addEventListener("submit",function(e){e.preventDefault();let t=document.getElementById("decimals"),o=t.value;console.log(o),chrome.storage.local.set({decimals:o});let l=document.getElementById("displayDecimals"),n=l.value;console.log(n),chrome.storage.local.set({displayDecimals:n})})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJtYXBwaW5ncyI6IkFDQUEsU0FBUyxnQkFBQSxDQUFpQixtQkFBb0IsV0FDMUMsT0FBTyxPQUFBLENBQVEsS0FBQSxDQUFNLEdBQUEsQ0FBSSxDQUFDLE1BQU0sRUFBRSxJQUFBLENBQUssQUFBQyxJQUVwQyxRQUFRLEdBQUEsQ0FEUixVQUFZLEVBQU8sR0FBbkIsRUFFYyxTQUFTLGNBQUEsQ0FBZSxPQUFPLFdBQUEsQ0FBYyxTQUMvRCxHQUVBLElBQU0sRUFBTyxTQUFTLGNBQUEsQ0FBZSxnQkFFckMsRUFBSyxnQkFBQSxDQUFpQixTQUFVLFNBQVUsQ0FBSyxFQUMzQyxFQUFNLGNBQUEsR0FHTixJQUFNLEVBQWdCLFNBQVMsY0FBQSxDQUFlLFlBQ3hDLEVBQWdCLEVBQWMsS0FBcEMsQ0FDQSxRQUFRLEdBQUEsQ0FBSSxHQUNaLE9BQU8sT0FBQSxDQUFRLEtBQUEsQ0FBTSxHQUFBLENBQUksQ0FBRSxTQUFVLENBQWMsR0FHbkQsSUFBTSxFQUF1QixTQUFTLGNBQUEsQ0FBZSxtQkFDL0MsRUFBdUIsRUFBcUIsS0FBbEQsQ0FDQSxRQUFRLEdBQUEsQ0FBSSxHQUNaLE9BQU8sT0FBQSxDQUFRLEtBQUEsQ0FBTSxHQUFBLENBQUksQ0FBRSxnQkFBaUIsQ0FBcUIsRUFDckUsRUFDSiIsInNvdXJjZXMiOlsiPGFub24+Iiwic3JjL3BvcHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uKCkge1xuICAgIGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldChbXG4gICAgICAgIFwiU3RyXCJcbiAgICBdKS50aGVuKChyZXN1bHQpPT57XG4gICAgICAgIHN0b3JlZFN0ciA9IHJlc3VsdC5TdHI7XG4gICAgICAgIGNvbnNvbGUubG9nKHN0b3JlZFN0cik7XG4gICAgICAgIGNvbnN0IHRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIkV0aFwiKS50ZXh0Q29udGVudCA9IHN0b3JlZFN0cjtcbiAgICB9KTtcbiAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkZWNpbWFsc0Zvcm1cIik7XG4gICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCkgLy8gUHJldmVudCB0aGUgZGVmYXVsdCBmb3JtIHN1Ym1pc3Npb25cbiAgICAgICAgO1xuICAgICAgICAvLyBkZWNpbWFsc1xuICAgICAgICBjb25zdCBkZWNpbWFsc0lucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkZWNpbWFsc1wiKTtcbiAgICAgICAgY29uc3QgZGVjaW1hbHNWYWx1ZSA9IGRlY2ltYWxzSW5wdXQudmFsdWU7XG4gICAgICAgIGNvbnNvbGUubG9nKGRlY2ltYWxzVmFsdWUpO1xuICAgICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoe1xuICAgICAgICAgICAgZGVjaW1hbHM6IGRlY2ltYWxzVmFsdWVcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGRpc3BsYXkgZGVjaW1hbHNcbiAgICAgICAgY29uc3QgZGlzcGxheURlY2ltYWxzSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRpc3BsYXlEZWNpbWFsc1wiKTtcbiAgICAgICAgY29uc3QgZGlzcGxheURlY2ltYWxzVmFsdWUgPSBkaXNwbGF5RGVjaW1hbHNJbnB1dC52YWx1ZTtcbiAgICAgICAgY29uc29sZS5sb2coZGlzcGxheURlY2ltYWxzVmFsdWUpO1xuICAgICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoe1xuICAgICAgICAgICAgZGlzcGxheURlY2ltYWxzOiBkaXNwbGF5RGVjaW1hbHNWYWx1ZVxuICAgICAgICB9KTtcbiAgICB9KTtcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKdFlYQndhVzVuY3lJNklrRkJRVUVzVTBGQlV5eHBRa0ZCYVVJc2IwSkJRVzlDTzBsQlF6RkRMRTlCUVU4c1VVRkJVU3hOUVVGTkxFbEJRVWs3VVVGQlF6dExRVUZOTEVWQlFVVXNTMEZCU3l4RFFVRkRPMUZCUTNCRExGbEJRVmtzVDBGQlR6dFJRVU51UWl4UlFVRlJMRWxCUVVrN1VVRkRXaXhOUVVGTkxFOUJRVkVzVTBGQlV5eGxRVUZsTEU5QlFVOHNZMEZCWXp0SlFVTXZSRHRKUVVWQkxFMUJRVTBzVDBGQlR5eFRRVUZUTEdWQlFXVTdTVUZGY2tNc1MwRkJTeXhwUWtGQmFVSXNWVUZCVlN4VFFVRlZMRXRCUVVzN1VVRkRNME1zVFVGQlRTeHBRa0ZCYVVJc2MwTkJRWE5ET3p0UlFVVTNSQ3hYUVVGWE8xRkJRMWdzVFVGQlRTeG5Ra0ZCWjBJc1UwRkJVeXhsUVVGbE8xRkJRemxETEUxQlFVMHNaMEpCUVdkQ0xHTkJRV003VVVGRGNFTXNVVUZCVVN4SlFVRkpPMUZCUTFvc1QwRkJUeXhSUVVGUkxFMUJRVTBzU1VGQlNUdFpRVUZGTEZWQlFWVTdVVUZCWXp0UlFVVnVSQ3h0UWtGQmJVSTdVVUZEYmtJc1RVRkJUU3gxUWtGQmRVSXNVMEZCVXl4bFFVRmxPMUZCUTNKRUxFMUJRVTBzZFVKQlFYVkNMSEZDUVVGeFFqdFJRVU5zUkN4UlFVRlJMRWxCUVVrN1VVRkRXaXhQUVVGUExGRkJRVkVzVFVGQlRTeEpRVUZKTzFsQlFVVXNhVUpCUVdsQ08xRkJRWEZDTzBsQlEzSkZPMEZCUTBvaUxDSnpiM1Z5WTJWeklqcGJJbk55WXk5d2IzQjFjQzVxY3lKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmtiMk4xYldWdWRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZEVUMDFEYjI1MFpXNTBURzloWkdWa0p5d2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJR05vY205dFpTNXpkRzl5WVdkbExteHZZMkZzTG1kbGRDaGJKMU4wY2lkZEtTNTBhR1Z1S0NoeVpYTjFiSFFwSUQwK0lIdGNiaUFnSUNBZ0lDQWdjM1J2Y21Wa1UzUnlJRDBnY21WemRXeDBMbE4wY2x4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5aHpkRzl5WldSVGRISXBYRzRnSUNBZ0lDQWdJR052Ym5OMElIUmxlSFFnUFNBb1pHOWpkVzFsYm5RdVoyVjBSV3hsYldWdWRFSjVTV1FvSjBWMGFDY3BMblJsZUhSRGIyNTBaVzUwSUQwZ2MzUnZjbVZrVTNSeUtWeHVJQ0FnSUgwcFhHNWNiaUFnSUNCamIyNXpkQ0JtYjNKdElEMGdaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkRUo1U1dRb0oyUmxZMmx0WVd4elJtOXliU2NwWEc1Y2JpQWdJQ0JtYjNKdExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ozTjFZbTFwZENjc0lHWjFibU4wYVc5dUlDaGxkbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQmxkbVZ1ZEM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwSUM4dklGQnlaWFpsYm5RZ2RHaGxJR1JsWm1GMWJIUWdabTl5YlNCemRXSnRhWE56YVc5dVhHNWNiaUFnSUNBZ0lDQWdMeThnWkdWamFXMWhiSE5jYmlBZ0lDQWdJQ0FnWTI5dWMzUWdaR1ZqYVcxaGJITkpibkIxZENBOUlHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUkNlVWxrS0Nka1pXTnBiV0ZzY3ljcFhHNGdJQ0FnSUNBZ0lHTnZibk4wSUdSbFkybHRZV3h6Vm1Gc2RXVWdQU0JrWldOcGJXRnNjMGx1Y0hWMExuWmhiSFZsWEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktHUmxZMmx0WVd4elZtRnNkV1VwWEc0Z0lDQWdJQ0FnSUdOb2NtOXRaUzV6ZEc5eVlXZGxMbXh2WTJGc0xuTmxkQ2g3SUdSbFkybHRZV3h6T2lCa1pXTnBiV0ZzYzFaaGJIVmxJSDBwWEc1Y2JpQWdJQ0FnSUNBZ0x5OGdaR2x6Y0d4aGVTQmtaV05wYldGc2MxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCa2FYTndiR0Y1UkdWamFXMWhiSE5KYm5CMWRDQTlJR1J2WTNWdFpXNTBMbWRsZEVWc1pXMWxiblJDZVVsa0tDZGthWE53YkdGNVJHVmphVzFoYkhNbktWeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCa2FYTndiR0Y1UkdWamFXMWhiSE5XWVd4MVpTQTlJR1JwYzNCc1lYbEVaV05wYldGc2MwbHVjSFYwTG5aaGJIVmxYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0dScGMzQnNZWGxFWldOcGJXRnNjMVpoYkhWbEtWeHVJQ0FnSUNBZ0lDQmphSEp2YldVdWMzUnZjbUZuWlM1c2IyTmhiQzV6WlhRb2V5QmthWE53YkdGNVJHVmphVzFoYkhNNklHUnBjM0JzWVhsRVpXTnBiV0ZzYzFaaGJIVmxJSDBwWEc0Z0lDQWdmU2xjYm4wcFhHNGlYU3dpYm1GdFpYTWlPbHRkTENKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWNHOXdkWEF1U0VGVFNGOVNSVVpmTmpreE1EbGlOVGMzTWpGa016STVZUzVxY3k1dFlYQWlmUT09XG4iLCJkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkge1xuICAgIGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldChbJ1N0ciddKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgc3RvcmVkU3RyID0gcmVzdWx0LlN0clxuICAgICAgICBjb25zb2xlLmxvZyhzdG9yZWRTdHIpXG4gICAgICAgIGNvbnN0IHRleHQgPSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0V0aCcpLnRleHRDb250ZW50ID0gc3RvcmVkU3RyKVxuICAgIH0pXG5cbiAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RlY2ltYWxzRm9ybScpXG5cbiAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpIC8vIFByZXZlbnQgdGhlIGRlZmF1bHQgZm9ybSBzdWJtaXNzaW9uXG5cbiAgICAgICAgLy8gZGVjaW1hbHNcbiAgICAgICAgY29uc3QgZGVjaW1hbHNJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZWNpbWFscycpXG4gICAgICAgIGNvbnN0IGRlY2ltYWxzVmFsdWUgPSBkZWNpbWFsc0lucHV0LnZhbHVlXG4gICAgICAgIGNvbnNvbGUubG9nKGRlY2ltYWxzVmFsdWUpXG4gICAgICAgIGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7IGRlY2ltYWxzOiBkZWNpbWFsc1ZhbHVlIH0pXG5cbiAgICAgICAgLy8gZGlzcGxheSBkZWNpbWFsc1xuICAgICAgICBjb25zdCBkaXNwbGF5RGVjaW1hbHNJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkaXNwbGF5RGVjaW1hbHMnKVxuICAgICAgICBjb25zdCBkaXNwbGF5RGVjaW1hbHNWYWx1ZSA9IGRpc3BsYXlEZWNpbWFsc0lucHV0LnZhbHVlXG4gICAgICAgIGNvbnNvbGUubG9nKGRpc3BsYXlEZWNpbWFsc1ZhbHVlKVxuICAgICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoeyBkaXNwbGF5RGVjaW1hbHM6IGRpc3BsYXlEZWNpbWFsc1ZhbHVlIH0pXG4gICAgfSlcbn0pXG4iXSwibmFtZXMiOlsiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiY2hyb21lIiwic3RvcmFnZSIsImxvY2FsIiwiZ2V0IiwidGhlbiIsInJlc3VsdCIsImNvbnNvbGUiLCJsb2ciLCJzdG9yZWRTdHIiLCJTdHIiLCJnZXRFbGVtZW50QnlJZCIsInRleHRDb250ZW50IiwiZm9ybSIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJkZWNpbWFsc0lucHV0IiwiZGVjaW1hbHNWYWx1ZSIsInZhbHVlIiwic2V0IiwiZGVjaW1hbHMiLCJkaXNwbGF5RGVjaW1hbHNJbnB1dCIsImRpc3BsYXlEZWNpbWFsc1ZhbHVlIiwiZGlzcGxheURlY2ltYWxzIl0sInZlcnNpb24iOjMsImZpbGUiOiJwb3B1cC5IQVNIX1JFRl82OTEwOWI1NzcyMWQzMjlhLmpzLm1hcCJ9
