function e(e,t,l){let n,s,i,a,c=e.toString();return("-"===c.charAt(0)?(c=c.substring(1),a=!0):a=!1,c.length>t)?(","===(n=(n=(n=c.substring(0,c.length-t)).split("").reverse().join("")).replace(/(\d{3})/g,"$1,")).slice(-1)&&(n=n.slice(0,-1)),n=n.split("").reverse().join(""),","===(s=(s=(s=c.substring(c.length-t,c.length)).substring(0,l)).replace(/(\d{3})/g,"$1,")).slice(-1)&&(s=s.slice(0,-1)),i=n+"."+s):(","===(s=(s=(s=(s=c.substring(c.length-t,c.length)).substring(0,l)).padStart(l,"0")).replace(/(\d{3})/g,"$1,")).slice(-1)&&(s=s.slice(0,-1)),i="0."+s),!0==a&&(i="-"+i),"."===i.slice(-1)&&(i=i.slice(0,-1)),i}var t=function(t,l,n,s){if("wei"===s){let s=e(t,l,n);return s}if("hex"===s){let s=function(e){if(!e.match(/^(0x)?[0-9A-Fa-f]+$/))throw Error("Invalid hexadecimal input");e.startsWith("0x")&&(e=e.slice(2));let t=0;e=e.toUpperCase();for(let l=0;l<e.length;l++){let n="0123456789ABCDEF".indexOf(e[l]);t=16*t+n}return t}(t),i=e(s,l,n);return i}};document.addEventListener("DOMContentLoaded",function(){let e,l;chrome.storage.local.get(["selectedStr","selectedConversionType","decimalsValue","displayDecimalsValue"]).then(n=>{e=n.selectedStr,l=n.selectedConversionType;let s=n.decimalsValue,i=n.displayDecimalsValue;document.getElementById("displayDecimals").value=i,document.getElementById("decimals").value=s;let a=t(e,s,i,l);document.getElementById("convertedStr").textContent=a});let n=document.getElementById("decimalsForm");n.addEventListener("submit",function(n){n.preventDefault();let s=document.getElementById("decimals").value,i=document.getElementById("displayDecimals").value;chrome.storage.local.set({decimalsValue:s,displayDecimalsValue:i});let a=t(e,s,i,l);document.getElementById("Eth").textContent=a})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
